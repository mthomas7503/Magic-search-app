{"ast":null,"code":"var request = require('request-promise');\n\nvar config = require('./config.js');\n\nvar _require = require('ramda'),\n    curryN = _require.curryN,\n    merge = _require.merge,\n    prop = _require.prop;\n\nvar Emitter = require('emitter20');\n\nvar get = curryN(3, function (type, page) {\n  var args = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  return request({\n    uri: \"\".concat(config.endpoint, \"/\").concat(type),\n    qs: merge(args, {\n      page: args.page || page\n    }),\n    json: true\n  }).then(prop(type));\n});\n\nmodule.exports = function (type) {\n  return {\n    /** Gets a resource by its id. */\n    find: function find(id) {\n      return request({\n        uri: \"\".concat(config.endpoint, \"/\").concat(type, \"/\").concat(id),\n        json: true\n      });\n    },\n\n    /** Gets a resource with a given query. */\n    where: get(type, 0),\n\n    /** Gets a resource with a given query (like where), but\n        returns an emitter that emits 3 events:\n        - data(card): emits a card when it is retrieved from the API\n        - error(err): emits an error if the request fails\n        - end(): called when all results have been retrieved\n    */\n    all: function all(args) {\n      var emitter = new Emitter();\n\n      var getEmit = function getEmit(type, page, args) {\n        return get(type, page, args).then(function (items) {\n          if (items.length > 0) {\n            items.forEach(function (c) {\n              return emitter.trigger('data', c);\n            });\n            return getEmit(type, page + 1, args); // RECURSION\n          } else {\n            emitter.trigger('end');\n            return null;\n          }\n        }).catch(function (err) {\n          return emitter.trigger('error', err);\n        });\n      };\n\n      getEmit(type, 1, args);\n      return emitter;\n    }\n  };\n};","map":null,"metadata":{},"sourceType":"script"}